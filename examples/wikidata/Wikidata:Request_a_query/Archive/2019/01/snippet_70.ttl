@prefix ex: <https://sparql.uniprot.org/.well-known/sparql-examples/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix wiki: <https://www.wikidata.org/wiki/> .

ex:sparqlrdf/Wikidata:Request_a_query/Archive/2019/01/snippet_70.ttl a sh:SPARQLExecutable,
        sh:SPARQLSelectExecutable ;
    rdfs:comment "Sparql query from file sparqlrdf/Wikidata:Request_a_query/Archive/2019/01/snippet_70.ttl"^^rdf:HTML ;
    dcterms:license <https://creativecommons.org/licenses/by-sa/4.0/> ;
    dcterms:isVersionOf <https://www.wikidata.org/wiki/Wikidata:Request_a_query/Archive/2019/01> ;
    sh:select """
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX wds: <http://www.wikidata.org/entity/statement/>
PREFIX wdv: <http://www.wikidata.org/value/>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX wikibase: <http://wikiba.se/ontology#>
PREFIX p: <http://www.wikidata.org/prop/>
PREFIX ps: <http://www.wikidata.org/prop/statement/>
PREFIX pq: <http://www.wikidata.org/prop/qualifier/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX bd: <http://www.bigdata.com/rdf#>

PREFIX wdref: <http://www.wikidata.org/reference/>
PREFIX psv: <http://www.wikidata.org/prop/statement/value/>
PREFIX psn: <http://www.wikidata.org/prop/statement/value-normalized/>
PREFIX pqv: <http://www.wikidata.org/prop/qualifier/value/>
PREFIX pqn: <http://www.wikidata.org/prop/qualifier/value-normalized/>
PREFIX pr: <http://www.wikidata.org/prop/reference/>
PREFIX prv: <http://www.wikidata.org/prop/reference/value/>
PREFIX prn: <http://www.wikidata.org/prop/reference/value-normalized/>
PREFIX wdno: <http://www.wikidata.org/prop/novalue/>
PREFIX wdata: <http://www.wikidata.org/wiki/Special:EntityData/>

PREFIX schema: <http://schema.org/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX prov: <http://www.w3.org/ns/prov#>
PREFIX bds: <http://www.bigdata.com/rdf/search#>
PREFIX gas: <http://www.bigdata.com/rdf/gas#>
PREFIX hint: <http://www.bigdata.com/queryHints#>


SELECT * WHERE {
  {
    VALUES (?title) {
      ("a test string to find a way to find the longest three (or so) substrings in a given string, though I would be fine with something like MAX(?substring) as well")
      ("being able to extract n-grams for n > 1 would be great too")
      (" another test string that starts and ends with space characters ")
      ("writing documentation is useful")
      ("OneWordTitleInCamelCase")
      ("Thanks for your help!")
    }
  }
  UNION
  {
    {
      SELECT ?title WHERE {
        ?work wdt:P1476 ?title. # let's keep the different languages in for the moment and worry about selecting the desired ones later
        ?work wdt:P31 wd:Q13442814 .
        FILTER(REGEX(?title, "\\s+"))   # The workflow below assumes the presence of spaces in the title. Need a way to bring in on-word titles but let's worry about that later too.

      }
      LIMIT 10
    }
  }
  BIND(STRLEN(REPLACE(?title, " ", "")) AS ?titlelength)
  
  BIND(STRBEFORE(?title, " ") AS ?substring1)
  BIND(STRLEN(REPLACE(?substring1, " ", "")) AS ?substring1length)
  BIND(STRAFTER(?title, " ") AS ?postfix)
  BIND(STRLEN(REPLACE(?postfix, " ", "")) AS ?postfixlength)
  BIND(STRBEFORE(?postfix, " ") AS ?substring2)
  BIND(STRLEN(REPLACE(?substring2, " ", "")) AS ?substring2length)
  BIND(STRAFTER(?postfix, ?substring2) AS ?postsubstring2)
  BIND(STRLEN(REPLACE(?substring2, " ", "")) AS ?postsubstring2length)
}
ORDER BY DESC(?substring1length) #order by longest first substring
# ORDER BY DESC(?substring2length) #order by longest second substring

# We still need to bind all those substrings together to be able to 
# identify the (up to) three longest one per title

""" ;
    schema:target <https://query.wikidata.org/sparql/> .
