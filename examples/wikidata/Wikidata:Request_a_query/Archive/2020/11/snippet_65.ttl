@prefix ex: <https://sparql.uniprot.org/.well-known/sparql-examples/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix wiki: <https://www.wikidata.org/wiki/> .

ex:sparqlrdf/Wikidata:Request_a_query/Archive/2020/11/snippet_65.ttl a sh:SPARQLExecutable,
        sh:SPARQLSelectExecutable ;
    rdfs:comment "Sparql query from file sparqlrdf/Wikidata:Request_a_query/Archive/2020/11/snippet_65.ttl"^^rdf:HTML ;
    dcterms:license <https://creativecommons.org/licenses/by-sa/4.0/> ;
    dcterms:isVersionOf <https://www.wikidata.org/wiki/Wikidata:Request_a_query/Archive/2020/11> ;
    sh:select """
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX wds: <http://www.wikidata.org/entity/statement/>
PREFIX wdv: <http://www.wikidata.org/value/>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX wikibase: <http://wikiba.se/ontology#>
PREFIX p: <http://www.wikidata.org/prop/>
PREFIX ps: <http://www.wikidata.org/prop/statement/>
PREFIX pq: <http://www.wikidata.org/prop/qualifier/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX bd: <http://www.bigdata.com/rdf#>

PREFIX wdref: <http://www.wikidata.org/reference/>
PREFIX psv: <http://www.wikidata.org/prop/statement/value/>
PREFIX psn: <http://www.wikidata.org/prop/statement/value-normalized/>
PREFIX pqv: <http://www.wikidata.org/prop/qualifier/value/>
PREFIX pqn: <http://www.wikidata.org/prop/qualifier/value-normalized/>
PREFIX pr: <http://www.wikidata.org/prop/reference/>
PREFIX prv: <http://www.wikidata.org/prop/reference/value/>
PREFIX prn: <http://www.wikidata.org/prop/reference/value-normalized/>
PREFIX wdno: <http://www.wikidata.org/prop/novalue/>
PREFIX wdata: <http://www.wikidata.org/wiki/Special:EntityData/>

PREFIX schema: <http://schema.org/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX prov: <http://www.w3.org/ns/prov#>
PREFIX bds: <http://www.bigdata.com/rdf/search#>
PREFIX gas: <http://www.bigdata.com/rdf/gas#>
PREFIX hint: <http://www.bigdata.com/queryHints#>

#defaultView:Map
SELECT DISTINCT ?item ?itemLabel ?place ?placeLabel ?id ?coords ?article ?mapflags ?rgb WHERE {
  ?place wdt:P131* wd:Q1223 . hint:Prior hint:gearing "forward".
                                              # ?place is in Washington, or is in a place that is in Washington
                                              # or is in a place which is within a place which is within Washington, &c
  ?item wdt:P291|wdt:P159|wdt:P131 ?place .   # ?item is published in, or has its HQ in, or is located in a ?place 
                                              # (which per the above is within Washington)
  ?item wdt:P31 / wdt:P279* wd:Q11032 . hint:Prior hint:gearing "forward".
                                              # get all items on the subclass tree of newspaper 
  ?item wdt:P17|wdt:P495 wd:Q30 .             # it's in America or has a country of origin of America
  OPTIONAL { ?item wdt:P5454 ?id .}           # might have an ID
  ?place wdt:P625 ?coords.                    # the ?place must have coordinates 
  OPTIONAL {                                  # go off & get articles that have infobox newspaper
    SELECT ?item ?pageid ?ns WHERE {
      SERVICE wikibase:mwapi {
        bd:serviceParam wikibase:endpoint "en.wikipedia.org" .
        bd:serviceParam wikibase:api "Generator" .
        bd:serviceParam mwapi:generator "search" .
        bd:serviceParam mwapi:gsrsearch "hastemplate:\"Infobox newspaper\"" .
        bd:serviceParam mwapi:gsrlimit "max" .
        ?item wikibase:apiOutputItem mwapi:item .
        ?ns wikibase:apiOutput "@ns" .
       }
    } LIMIT 10000                             # MVAPI gives max 10000 results anyway, and the query seems more
                                              # effiencient if the optimizer knows the maximum number of results.
  }
     OPTIONAL {                               # ?item might have an EN wiki article
      ?article schema:about ?item .
      ?article schema:isPartOf <https://en.wikipedia.org/> .
  }
                                       # Lord knows. Some sort of colour coding logic. Too tired.
  BIND(IF(BOUND(?ns),"_infobox","_noinfobox") AS ?infobox).  # there is or is not an infobox
  BIND(IF(BOUND(?article),"enwiki","noenwiki") AS ?onwiki).  # there is or is not an enwiki article
  BIND(CONCAT(?onwiki,?infobox) as ?layer) .                 # concatenate those twoas a key (?)
                                                             # assign some colours based on state            
  BIND( IF(BOUND(?article),   IF(BOUND(?ns), "009500" , "FFF000" )  ,  "FF0000"   )  AS ?rgb).  
  SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
}

""" ;
    schema:target <https://query.wikidata.org/sparql/> .
