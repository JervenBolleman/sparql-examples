@prefix ex: <https://sparql.uniprot.org/.well-known/sparql-examples/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix wiki: <https://www.wikidata.org/wiki/> .

ex:sparqlrdf/Wikidata:Request_a_query/Archive/2022/05/snippet_11.ttl a sh:SPARQLExecutable,
        sh:SPARQLSelectExecutable ;
    rdfs:comment "Sparql query from file sparqlrdf/Wikidata:Request_a_query/Archive/2022/05/snippet_11.ttl"^^rdf:HTML ;
    dcterms:license <https://creativecommons.org/licenses/by-sa/4.0/> ;
    dcterms:isVersionOf <https://www.wikidata.org/wiki/Wikidata:Request_a_query/Archive/2022/05> ;
    sh:select """
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX wds: <http://www.wikidata.org/entity/statement/>
PREFIX wdv: <http://www.wikidata.org/value/>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX wikibase: <http://wikiba.se/ontology#>
PREFIX p: <http://www.wikidata.org/prop/>
PREFIX ps: <http://www.wikidata.org/prop/statement/>
PREFIX pq: <http://www.wikidata.org/prop/qualifier/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX bd: <http://www.bigdata.com/rdf#>

PREFIX wdref: <http://www.wikidata.org/reference/>
PREFIX psv: <http://www.wikidata.org/prop/statement/value/>
PREFIX psn: <http://www.wikidata.org/prop/statement/value-normalized/>
PREFIX pqv: <http://www.wikidata.org/prop/qualifier/value/>
PREFIX pqn: <http://www.wikidata.org/prop/qualifier/value-normalized/>
PREFIX pr: <http://www.wikidata.org/prop/reference/>
PREFIX prv: <http://www.wikidata.org/prop/reference/value/>
PREFIX prn: <http://www.wikidata.org/prop/reference/value-normalized/>
PREFIX wdno: <http://www.wikidata.org/prop/novalue/>
PREFIX wdata: <http://www.wikidata.org/wiki/Special:EntityData/>

PREFIX schema: <http://schema.org/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX prov: <http://www.w3.org/ns/prov#>
PREFIX bds: <http://www.bigdata.com/rdf/search#>
PREFIX gas: <http://www.bigdata.com/rdf/gas#>
PREFIX hint: <http://www.bigdata.com/queryHints#>

#title:line-map of rivers based on distance to the mouth
#defaultView:Map
SELECT ?seq ?item ?itemLabel ?coord2 ?line ?riverLabel (?river AS ?layer)

WITH {
  SELECT DISTINCT ?river ?mouthlat ?mouthlong ?coord WHERE { 
      ?river p:P403 ?stat. 
      ?river wdt:P131/wdt:P131 wd:Q22 .
      ?stat pq:P625 ?coord .                            # get the coords for the main river  
      ?stat pqv:P625/wikibase:geoLatitude ?mouthlat. 
      ?stat pqv:P625/wikibase:geoLongitude ?mouthlong.
  }
} AS %rivers
WITH {
  SELECT ?river ?item ?lat ?long ?coord2 ?dist WHERE { 
    {
      INCLUDE %rivers .
      ?stat2 ps:P403 ?river.
      ?item p:P403 ?stat2. 
      ?stat2 pqv:P625/wikibase:geoLatitude ?lat. 
      ?stat2 pqv:P625/wikibase:geoLongitude ?long.
      ?stat2 pq:P625 ?coord2 .                          # get coords for all tributary rivers
      BIND(geof:distance(?coord, ?coord2) as ?dist)     # distance between tributary mouth and main river mouth
    }
    UNION
    {
      SELECT ?river (?river AS ?item) (?mouthlat AS ?lat) (?mouthlong AS ?long) (?coord AS ?coord2) (0.0 AS ?dist)
      WHERE
      { INCLUDE %rivers }
    }
  }
} AS %points

WITH {                                                  # work out the sequence of mouths based on distance
  SELECT ?river ?item (COUNT(DISTINCT(?item2)) AS ?seq0) WHERE {
    INCLUDE %points .
 
    {
      SELECT ?river (?item AS ?item2) (?dist AS ?dist2) WHERE {
         INCLUDE %points .
      }
    }
    
    FILTER (?dist2 <= ?dist) .
  } GROUP BY ?river ?item 
} AS %seq

WITH {                                                 # unite the sequence and the coordinate details on a single row
  SELECT ?river ?seq0 ?item ?dist ?coord2 ?lat ?long  WHERE {
       INCLUDE %points .
       INCLUDE %seq .
    }
} AS %points_seq     

WHERE {                                               # construct lines from mouth to mouth
  {
    SELECT ?river (?seq0 AS ?seq) ?item ?elev ?coord2 ?lat ?long  WHERE {
       INCLUDE %points_seq .
    }
  }
  {
    SELECT ?river ((?seq0-1) AS ?seq) (?lat AS ?lat2) (?long AS ?long2) WHERE {
       INCLUDE %points_seq .
    }
  }
  BIND(CONCAT('LINESTRING (', STR(?long), ' ', STR(?lat), ',', STR(?long2), ' ', STR(?lat2), ')') AS ?str) .
  BIND(STRDT(?str, geo:wktLiteral) AS ?line) 
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en". }
} ORDER BY ?seq

""" ;
    schema:target <https://query.wikidata.org/sparql/> .
